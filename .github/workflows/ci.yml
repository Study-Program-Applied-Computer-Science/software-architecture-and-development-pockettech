name: CI/CD Pipeline

on:
  push:
    branches:
      - jyoti/feature/user-login
  pull_request:
    branches:
      - jyoti/feature/user-login

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
    # Checkout the code
    - name: Checkout code
      uses: actions/checkout@v3

    # List project files for debugging (helps confirm that files exist)
    - name: List project files for debugging
      run: ls -R

    # Move into the backend folder
    - name: Change working directory to backend
      run: cd backend

    # List project files for debugging (helps confirm that files exist)
    - name: List project files for debugging
      run: ls -R

    # Set up Private and Public Keys
    - name: Setup Private and Public Keys
      run: |
        mkdir -p backend/AuthService/app/keys
        echo "${{ secrets.PRIVATE_KEY_B64 }}" | base64 --decode > backend/AuthService/app/keys/private_key.pem
        echo "${{ secrets.PUBLIC_KEY_B64 }}" | base64 --decode > backend/AuthService/app/keys/public_key.pem

    # Set up Python environment
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    # Set up environment variables
    - name: Set environment variables
      run: |
        echo "${{ secrets.AUTH_SERVICE_ENV }}" > backend/AuthService/.env
        echo "${{ secrets.USER_LOGIN_SERVICE_ENV }}" > backend/UserLoginService/.env

    # Install Docker
    - name: Set up Docker
      uses: docker/setup-buildx-action@v2

    # Build and Test AuthService
    - name: Build AuthService
      run: |
        docker build -t auth_service backend/AuthService
    - name: Debug AuthService Container
      run: |
        docker run --rm auth_service ls -R /app
    - name: Run AuthService Tests
      run: |
        docker run --rm --env-file backend/AuthService/.env auth_service pytest /tests --disable-warnings

    # Build and Test UserLoginService
    - name: Build UserLoginService
      run: |
        docker build -t user_login_service backend/UserLoginService
    - name: Run UserLoginService Tests
      run: |
        docker run --rm --env-file backend/UserLoginService/.env user_login_service pytest /tests --disable-warnings

    # Run Linting (Optional)
    - name: Lint Code
      run: |
        pip install flake8
        flake8 backend/AuthService backend/UserLoginService --count --select=E9,F63,F7,F82 --show-source --statistics
