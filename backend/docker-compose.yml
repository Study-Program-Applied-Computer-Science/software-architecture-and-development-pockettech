services:
  auth_service:
    build:
      context: ./AuthService
    container_name: auth_service
    ports:
      - "8001:8001"
    env_file:
      - ./AuthService/.env
    volumes:
      - ./common:/common/common
      - ./AuthService:/app  
    environment:
      - PYTHONPATH=/app:/common
    depends_on:
      - db

  user_login_service:
    build:
      context: ./UserLoginService
    container_name: user_login_service
    ports:
      - "8002:8002"
    env_file:
      - ./UserLoginService/.env
    volumes:
      - ./common:/common/common
      - ./UserLoginService:/app
    environment:
      - PYTHONPATH=/app:/common
    depends_on:
      - db
      
  transaction_analysis_service:
    build:
      context: ./TransactionAnalysisService
    container_name: transaction_analysis_service
    ports:
      - "8003:8003"
    env_file:
      - ./TransactionAnalysisService/.env
    volumes:
      - ./common:/common/common
      - ./TransactionAnalysisService:/app
    environment:
      - PYTHONPATH=/app:/common
    depends_on:
      - db

  db:
    image: postgres:15
    container_name: finance_db
    env_file:
      - ./.env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./db_init/init.sql:/docker-entrypoint-initdb.d/init.sql

  frontend:
    build:
      context: ../frontend  # Path to your frontend project
    container_name: frontend
    ports:
      - "3000:80"  # Expose port 3000 for local access
    depends_on:
      - transaction_analysis_service  # Ensure backend starts first
    volumes:
      - ./frontend:/app  # Optional: Only needed if developing
    

volumes:
  db_data:
